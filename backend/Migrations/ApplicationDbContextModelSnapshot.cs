// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using backend.Data;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("backend.Models.Entities.CartItem", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    b.Property<int>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnOrder(1);

                    b.Property<string>("StockId")
                        .HasColumnType("text");

                    b.Property<bool>("IsInMeters")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("FinalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ProductID")
                        .HasColumnType("integer");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Warehouse")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId", "ProductId", "StockId", "IsInMeters");

                    b.HasIndex("ProductID");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("IX_CartItem_ProductId");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_CartItem_UserId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("backend.Models.Entities.CustomerInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Inn")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("IX_CustomerInfo_UserId");

                    b.ToTable("CustomerInfos");
                });

            modelBuilder.Entity("backend.Models.Entities.Nomenclature", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<decimal>("Diameter")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("FormOfLength")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Gost")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("IDCat")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IDFunctionType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("IDType")
                        .HasColumnType("integer");

                    b.Property<string>("IDTypeNew")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Koef")
                        .HasColumnType("decimal(10,6)");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<decimal>("PipeWallThickness")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("ProductionType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal?>("ProfileSize2")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("SteelGrade")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("ID");

                    b.HasIndex("IDType")
                        .HasDatabaseName("IX_Nomenclature_IDType");

                    b.ToTable("Nomenclatures");
                });

            modelBuilder.Entity("backend.Models.Entities.Order", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<bool>("AdminNotified")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Inn")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<long>("TelegramUserId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Order_CreatedAt");

                    b.HasIndex("TelegramUserId")
                        .HasDatabaseName("IX_Order_TelegramUserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("backend.Models.Entities.Price", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("integer");

                    b.Property<string>("IDStock")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<decimal>("NDS")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal?>("PriceLimitM1")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("PriceLimitM2")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("PriceLimitT1")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("PriceLimitT2")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PriceM")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("PriceM1")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("PriceM2")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PriceT")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("PriceT1")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("PriceT2")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ID", "IDStock");

                    b.HasIndex("IDStock")
                        .HasDatabaseName("IX_Price_IDStock");

                    b.ToTable("Prices");
                });

            modelBuilder.Entity("backend.Models.Entities.PriceUpdate", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<bool>("IsProcessed")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("NDS")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("PriceLimitM1")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("PriceLimitM2")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("PriceLimitT1")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("PriceLimitT2")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("PriceM")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("PriceM1")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("PriceM2")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("PriceT")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("PriceT1")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("PriceT2")
                        .HasColumnType("numeric");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<string>("StockId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ID");

                    b.HasIndex("IsProcessed");

                    b.HasIndex("ProductId", "StockId");

                    b.ToTable("PriceUpdates");
                });

            modelBuilder.Entity("backend.Models.Entities.ProductType", b =>
                {
                    b.Property<int>("IDType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IDType"));

                    b.Property<string>("IDParentType")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<string>("OriginalGuid")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("IDType");

                    b.ToTable("ProductTypes");
                });

            modelBuilder.Entity("backend.Models.Entities.Remnant", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("integer");

                    b.Property<string>("IDStock")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<decimal?>("AvgTubeLength")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("AvgTubeWeight")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("InStockM")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("InStockT")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("NomenclatureID")
                        .HasColumnType("integer");

                    b.Property<decimal?>("ReservedM")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("ReservedT")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("SoonArriveM")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("SoonArriveT")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ID", "IDStock");

                    b.HasIndex("IDStock")
                        .HasDatabaseName("IX_Remnant_IDStock");

                    b.HasIndex("NomenclatureID");

                    b.ToTable("Remnants");
                });

            modelBuilder.Entity("backend.Models.Entities.RemnantUpdate", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<decimal?>("AvgTubeLength")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("AvgTubeWeight")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("InStockM")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("InStockT")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsProcessed")
                        .HasColumnType("boolean");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<decimal?>("ReservedM")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("ReservedT")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("SoonArriveM")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("SoonArriveT")
                        .HasColumnType("numeric");

                    b.Property<string>("StockId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ID");

                    b.HasIndex("IsProcessed");

                    b.HasIndex("ProductId", "StockId");

                    b.ToTable("RemnantUpdates");
                });

            modelBuilder.Entity("backend.Models.Entities.Stock", b =>
                {
                    b.Property<string>("IDStock")
                        .HasColumnType("text");

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ConsigneeCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("FIASId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("OwnerFullName")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("OwnerInn")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("OwnerKpp")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("OwnerShortName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("RailwayStation")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Schedule")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("StockName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("IDStock");

                    b.ToTable("Stocks");
                });

            modelBuilder.Entity("backend.Models.Entities.StockUpdate", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("ConsigneeCode")
                        .HasColumnType("text");

                    b.Property<string>("FIASId")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsProcessed")
                        .HasColumnType("boolean");

                    b.Property<string>("OwnerFullName")
                        .HasColumnType("text");

                    b.Property<string>("OwnerInn")
                        .HasColumnType("text");

                    b.Property<string>("OwnerKpp")
                        .HasColumnType("text");

                    b.Property<string>("OwnerShortName")
                        .HasColumnType("text");

                    b.Property<string>("RailwayStation")
                        .HasColumnType("text");

                    b.Property<string>("Schedule")
                        .HasColumnType("text");

                    b.Property<string>("StockId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<string>("StockName")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ID");

                    b.HasIndex("IsProcessed");

                    b.HasIndex("StockId");

                    b.ToTable("StockUpdates");
                });

            modelBuilder.Entity("backend.Models.Entities.TelegramUser", b =>
                {
                    b.Property<long>("TelegramUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Relational:JsonPropertyName", "telegramUserId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("TelegramUserId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "createdAt");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasAnnotation("Relational:JsonPropertyName", "email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasAnnotation("Relational:JsonPropertyName", "firstName");

                    b.Property<string>("Inn")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasAnnotation("Relational:JsonPropertyName", "inn");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasAnnotation("Relational:JsonPropertyName", "lastName");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasAnnotation("Relational:JsonPropertyName", "phone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasAnnotation("Relational:JsonPropertyName", "status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "updatedAt");

                    b.Property<string>("Username")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasAnnotation("Relational:JsonPropertyName", "username");

                    b.HasKey("TelegramUserId");

                    b.HasIndex("Email")
                        .HasDatabaseName("IX_TelegramUser_Email");

                    b.HasIndex("Inn")
                        .HasDatabaseName("IX_TelegramUser_Inn");

                    b.HasIndex("Phone")
                        .HasDatabaseName("IX_TelegramUser_Phone");

                    b.ToTable("TelegramUsers");
                });

            modelBuilder.Entity("backend.Models.Entities.UpdateLog", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EntityId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Operation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ID");

                    b.HasIndex("EntityType");

                    b.HasIndex("Timestamp");

                    b.ToTable("UpdateLogs");
                });

            modelBuilder.Entity("backend.Models.Entities.CartItem", b =>
                {
                    b.HasOne("backend.Models.Entities.Nomenclature", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID");

                    b.HasOne("backend.Models.Entities.Nomenclature", null)
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("backend.Models.Entities.Nomenclature", b =>
                {
                    b.HasOne("backend.Models.Entities.ProductType", null)
                        .WithMany()
                        .HasForeignKey("IDType")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("backend.Models.Entities.Order", b =>
                {
                    b.OwnsMany("backend.Models.Entities.OrderCartItem", "Items", b1 =>
                        {
                            b1.Property<string>("OrderId")
                                .HasColumnType("character varying(8)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<decimal>("FinalPrice")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<bool>("IsInMeters")
                                .HasColumnType("boolean");

                            b1.Property<int>("ProductId")
                                .HasColumnType("integer");

                            b1.Property<string>("ProductName")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)");

                            b1.Property<decimal>("Quantity")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<decimal>("UnitPrice")
                                .HasColumnType("decimal(18,2)");

                            b1.HasKey("OrderId", "Id");

                            b1.ToTable("OrderCartItem");

                            b1.WithOwner()
                                .HasForeignKey("OrderId");
                        });

                    b.Navigation("Items");
                });

            modelBuilder.Entity("backend.Models.Entities.Price", b =>
                {
                    b.HasOne("backend.Models.Entities.Nomenclature", null)
                        .WithMany()
                        .HasForeignKey("ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("backend.Models.Entities.Stock", null)
                        .WithMany()
                        .HasForeignKey("IDStock")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("backend.Models.Entities.Remnant", b =>
                {
                    b.HasOne("backend.Models.Entities.Stock", "Stock")
                        .WithMany()
                        .HasForeignKey("IDStock")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.Entities.Nomenclature", "Nomenclature")
                        .WithMany()
                        .HasForeignKey("NomenclatureID");

                    b.Navigation("Nomenclature");

                    b.Navigation("Stock");
                });
#pragma warning restore 612, 618
        }
    }
}
