using Telegram.Bot;
using Telegram.Bot.Types;
using Telegram.Bot.Types.ReplyMarkups;

namespace backend.Services
{
    public interface ITelegramService
    {
        Task HandleUpdateAsync(Update update);
    }

    public class TelegramService : ITelegramService
    {
        private readonly TelegramBotClient _botClient;
        private readonly string _baseUrl;

        public TelegramService(IConfiguration configuration)
        {
            var botToken = configuration["Telegram:BotToken"];
            _botClient = new TelegramBotClient(botToken);
            _baseUrl = configuration["App:BaseUrl"];
        }

        public async Task HandleUpdateAsync(Update update)
        {
            if (update.Message?.Text == "/start")
            {
                var webAppUrl = $"{_baseUrl}/miniapp";
                
                var keyboard = new InlineKeyboardMarkup(new[]
                {
                    new[]
                    {
                        InlineKeyboardButton.WithWebApp(
                            "üè≠ –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥ —Ç—Ä—É–±",
                            new WebAppInfo { Url = webAppUrl }
                        )
                    }
                });

                await _botClient.SendMessage(
                    update.Message.Chat.Id,
                    "üè≠ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞—Ç–∞–ª–æ–≥ —Ç—Ä—É–±–Ω–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏!\n\n" +
                    "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n" +
                    "‚Ä¢ üìã –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –ø—Ä–æ–¥—É–∫—Ü–∏–∏\n" +
                    "‚Ä¢ üîç –§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —Ç—Ä—É–±—ã –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º\n" +
                    "‚Ä¢ üõí –§–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫–∞–∑—ã —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ —Å–∫–∏–¥–∫–∞–º–∏\n" +
                    "‚Ä¢ üí∞ –í–∏–¥–µ—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –∏ –æ—Å—Ç–∞—Ç–∫–∏");
            }
        }
    }
}