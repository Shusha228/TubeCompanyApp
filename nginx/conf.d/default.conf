server {
    listen 80;
    server_name localhost;

    access_log /dev/stdout;
    error_log /dev/stderr;

    # Общие ограничения для всех location
    limit_conn conn_limit 20;
    limit_req zone=general_limit burst=50 nodelay;

    # Все API endpoints
    location ~ ^/(api|swagger|health|docs) {
        # Более строгие лимиты для API
        limit_req zone=api_limit burst=20 nodelay;
        limit_conn conn_limit 10;

        # Блокируем большие тела запросов
        client_max_body_size 1M;
        client_body_timeout 10s;

        # Разрешаем доступ к Swagger UI без проверок
        if ($request_uri ~* "^/swagger(/|$|index\.html)") {
            # Пропускаем проверки для Swagger
            break;
        }

        # Разрешаем запросы от Telegram Mini App
        if ($http_origin ~* (t\.me|telegram\.me|web\.telegram\.org|webtg\.org)) {
            # Пропускаем проверки для Telegram
            break;
        }

        # Для всех остальных API endpoints проверяем Referer/Origin
        if ($http_referer !~* "^http://localhost/") {
            return 403 "Direct API access not allowed";
        }

        # Или проверяем Origin
        if ($http_origin !~* "^http://localhost$") {
            return 403 "Direct API access not allowed";
        }

        proxy_pass http://backend:8080;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Таймауты для backend
        proxy_connect_timeout 5s;
        proxy_send_timeout 10s;
        proxy_read_timeout 10s;
    }

    # Frontend
    location / {
        # Лимиты для статики
        limit_req zone=general_limit burst=100 nodelay;
        
        proxy_pass http://frontend:3000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Таймауты для frontend
        proxy_connect_timeout 5s;
        proxy_send_timeout 10s;
        proxy_read_timeout 10s;
    }

    # Специальный endpoint для Telegram Web App проверки
    location /telegram-auth {
        # Более мягкие лимиты для Telegram
        limit_req zone=api_limit burst=30 nodelay;
        limit_conn conn_limit 15;

        # Разрешаем только Telegram origins
        if ($http_origin !~* (t\.me|telegram\.me|web\.telegram\.org|webtg\.org)) {
            return 403 "Telegram access only";
        }

        # Добавляем CORS headers для Telegram
        add_header Access-Control-Allow-Origin $http_origin always;
        add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Origin, Content-Type, Accept, Authorization, tgWebAppData" always;
        add_header Access-Control-Allow-Credentials true always;

        if ($request_method = OPTIONS) {
            return 204;
        }

        proxy_pass http://backend:8080;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Передаем специальные Telegram заголовки
        proxy_set_header X-Telegram-Init-Data $http_tgWebAppData;
        
        # Таймауты для Telegram endpoints
        proxy_connect_timeout 10s;
        proxy_send_timeout 15s;
        proxy_read_timeout 15s;
    }

    # Защита от ботов и сканеров
    location ~* \.(php|asp|aspx|jsp|pl)$ {
        return 444;
    }

    # Блокируем common exploits
    location ~* (eval\(|base64_|cmd=|/etc/passwd) {
        return 444;
    }

    # Health check без ограничений
    location = /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }

    # Блокируем скрытые файлы
    location ~ /\. {
        deny all;
        return 404;
    }

    # Защита от сканирования
    location ~* (\.git|\.env|\.htaccess|\.htpasswd) {
        deny all;
        return 404;
    }
}